// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // load flag of ARegister
    Not(in=instruction[15], out=notins15);
    Or(a=instruction[5], b=notins15, out=Aload);  

    // select flag of MUX1
    And(a=instruction[12], b=instruction[15], out=selmux);

    // load flag of DRegister
    And(a=instruction[4], b=instruction[15], out=Dload);

    // writeM flag
    And(a=instruction[3], b=instruction[15], out=writeM);


    // Determine if it's an A-order. 
    Mux16(a=instruction, b=aluout, sel=instruction[15], out=muxout0);
    ARegister(in=muxout0, load=Aload, out=arout, out[0..14]=addressM);

    // Determine whether to use A-register or inM
    Mux16(a=arout, b=inM, sel=selmux, out=muxout1);

    // update pc
    PC(in=arout, load=loadpc, inc=true, reset=reset, out[0..14]=pc);

    // Dtermines whthere DRegister 
    DRegister(in=aluout, load=Dload, out=dout);

    ALU(x=dout, y=muxout1, 
        zx=instruction[11], 
        nx=instruction[10], 
        zy=instruction[9], 
        ny=instruction[8], 
        f=instruction[7], 
        no=instruction[6], 
        out=outM, out=aluout,
        zr=zr, ng=ng);

    // Dtermines if PC is jump order
    And(a=instruction[2], b=ng, out=b0);
    And(a=instruction[1], b=zr, out=b1);
    Not(in=ng, out=notng);
    Not(in=zr, out=notzr);
    And(a=instruction[0], b=notng, out=b2);
    And(a=b2, b=notzr, out=b3);
    Or(a=b0, b=b1, out=b4);
    Or(a=b3, b=b4, out=b5);
    And(a=b5, b=instruction[15], out=loadpc);
}